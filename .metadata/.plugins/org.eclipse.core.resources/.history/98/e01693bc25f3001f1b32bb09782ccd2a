package org.algorithm.impl;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.algorithm.intf.SimpleType;
import org.algorithm.intf.Type;
import org.jdom.Attribute;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;

//Main Parser class for wsdl
public class AlgorithmEngine {
	
	/*map contains all the Types obtained from a given wsdl.
	 * You could persist it every time you finish parsing a wsdl to permanently store parsed records.
	 * the store can act as an abstract dictionary
	 */
	
	private Map<String, Type> localMap=null;
	
	private  Map<String, Type> getTypeMap(){
		return localMap;
	}
	private  void setLocalMap(Map<String, Type> localMap) {
		this.localMap = localMap;
	}
	//recursively processes elements in a WSDL
	public void process(Element element, Map<String, Type> localMap) {
	
		inspectHybrid(element, localMap);
	    
	    List content = element.getContent();
	    Iterator iterator = content.iterator();
	    
	    while (iterator.hasNext()) {
	      Object o = iterator.next();
	      if (o instanceof Element) {
	        Element child = (Element) o;
	        process(child, localMap);     
	      }
	    }
	}
	
	//assumption:the elements in the each original complex type are all simple types
	protected List<Type> getAllTNS(Map<String, Type> localMap, String tnsType){
	
		List<Type> types=new ArrayList<Type>();
		if(tnsType.startsWith("tns:")){
		
		String tnsName=tnsType.substring(tnsType.indexOf(":")+1);
		if(localMap.containsKey(tnsName.trim())){
				
			Type originalComplex=localMap.get(tnsName.trim());
		if(originalComplex instanceof SequenceType){	
			SequenceType t1=(SequenceType)originalComplex;	
			return t1.getElements();
		}
		if(originalComplex instanceof ChoiceType){
					
			ChoiceType t2=(ChoiceType)originalComplex;
			return t2.getElements();
		}
		if(originalComplex instanceof AllComplexType){
					
			AllComplexType t3=(AllComplexType)originalComplex;
			return t3.getElements();
		}
	}	  
	} 
		return types; //will always be an empty set.
	}
	public  void inspectHybrid(Element element, Map<String, Type> localMap) { 
	
	  	SimpleTypeImp simple=null;
	  	SequenceType seqComplex=null;
	    
	    String type=null;
	    Namespace namespace = element.getNamespace();
	    try{ //all adElementType() methods will throw  a CannotAddTypeToCollectionException
			
	    if (namespace != Namespace.NO_NAMESPACE) {
	      
	      String elementName=element.getAttributeValue("name");
	      Element parentElement=element.getParent();
	     
	      //handle sequence element <schema><complex><sequence><element>...</element></sequence></complex>....</schema>
	      if(parentElement!=null && parentElement.getName().equals("sequence")){
	    	  
	    	  type=getTypeAttribute(element);
	    	  
	    	  Element parent2=parentElement.getParent();
	    	  
	    	  if(parent2!=null && parent2.getName().equals("complexType")){
	    		  
	    		  Element parent3=parent2.getParent();
	    		  
	    		  if(parent3!=null && parent3.getName().equals("element")){
	    			  
	    			  String complexTypeName=parent3.getAttributeValue("name");
	    			  
	    			if(type!=null){
	    				
	    				if(localMap.containsKey(complexTypeName)){
	    					
	    				Type complexType=localMap.get(complexTypeName);
	    				if(complexType instanceof SequenceType){
	    						 
	    					List<Type> elements=getAllTNS(localMap, type);	    						  
		    				if(elements!=null){
		    					for (Type simpleType : elements) {
		    						if(simpleType instanceof SimpleTypeImp){
		    							SimpleTypeImp simp=(SimpleTypeImp)simpleType;
		    									  
		    							((SequenceType)complexType).addElementType(simp.getTypeName(), simp.getName());
		    						}
		    					}
		    				}//end if
		    				((SequenceType)complexType).addElementType(type, elementName);
									localMap.put(complexTypeName, complexType);
		    				}//end if
	    					  
	    				}else{	  
	    					seqComplex=new SequenceType();
	    			    	seqComplex.setName(complexTypeName);
	    			    	 //check for TNS first
	    			    	List<Type> elements=getAllTNS(localMap, type);
	    			    	
	    			    if(elements!=null){
	    			    	for (Type simpleType : elements) {
  							if(simpleType instanceof SimpleTypeImp){
  								SimpleTypeImp simp=(SimpleTypeImp)simpleType;
  								seqComplex.addElementType(simp.getTypeName(), simp.getName());
  							}//end if
  							}//end for
  						 }//end if
	    			    	seqComplex.addElementType(type, elementName);
							localMap.put(complexTypeName, seqComplex);
	    			    }
	    			}
	    			
	    		  }else if(parent3!=null && parent3.getName().equals("schema")){
	    			  
	    			  String complexTypeName=parent2.getAttributeValue("name");    			  
	    			 
	    			 if(type!=null){
	    				 
	    				 if(localMap.containsKey(complexTypeName)){
	    					 
	    					Type complexType=localMap.get(complexTypeName);
	    					  
	    					if(complexType instanceof SequenceType){
	    						  
	    					SequenceType seq=(SequenceType)complexType;
	    					seq.addElementType(type, elementName);
	    						  
	    					//check for TNS first
	    					List<Type> elements=getAllTNS(localMap, type);
	    						 
	    					if(elements!=null){
	    						
	    						for (Type simpleType : elements) {
	    							
	    							if(simpleType instanceof SimpleTypeImp){
	    									  
	    								SimpleTypeImp simp=(SimpleTypeImp)simpleType;
	    								seq.addElementType(simp.getSimple().getTypeName(), simp.getName());
	    							}
	    						}
	    						for(Type type2 : seq.getElements()) {
	    							SimpleTypeImp simp2=(SimpleTypeImp)type2;
	    							//System.out.println(seq.getName()+" ELEMENT ( "+simp2.getName()+") TYPE ("+simp2.getSimple().getTypeName()+")");
	    						}
	    							  
	    					}	
	    					localMap.put(complexTypeName, complexType);
	    					}
	    				 }else{	  
	    					seqComplex=new SequenceType();
	    			    	seqComplex.setName(complexTypeName);
	    			    	 //check for TNS first
	    			    	List<Type> elements=getAllTNS(localMap, type);
	    			    	
  						  	if(elements!=null){
  							  for (Type simpleType : elements) {
  								  
  								 if(simpleType instanceof SimpleTypeImp){
  									 SimpleTypeImp simp=(SimpleTypeImp)simpleType;
  									 seqComplex.addElementType(simp.getSimple().getTypeName(), simp.getName());
  								  }
  							  }
  						  	}
	    			    	seqComplex.addElementType(type, elementName);
							localMap.put(complexTypeName, seqComplex);
	    				  }
		    			}
	    		  } 		  
	   //handle sequence element <schema><complex><complexContent><extension><sequence><element>...
	    //</element></sequence></extension></complexContent></complex>....</schema>      	  
	    	 }else if(parent2!=null && parent2.getName().equals("extension")){
	    		  
	    		  Element parentExt=parent2.getParent();
	    		  if(parentExt!=null && parentExt.getName().equals("complexContent")){
	    
	    			Element parentCmplxContent=parentExt.getParent();
	    			  
	    			if(parentCmplxContent!=null && parentCmplxContent.getName().equals("complexType")){
	    				  	
	    			String complexTypeName=parentCmplxContent.getAttributeValue("name");
	    				if(type!=null){
	    					 if(localMap.containsKey(complexTypeName)){
	    						 
		    					Type complexType=localMap.get(complexTypeName);
		    					if(complexType instanceof SequenceType){
		    						  //check for TNS first
		    					List<Type> elements=getAllTNS(localMap, type);
		    					if(elements!=null){
		    						for (Type simpleType : elements) {
		    						if(simpleType instanceof SimpleTypeImp){
		    							SimpleTypeImp simp=(SimpleTypeImp)simpleType;
		    							((SequenceType)complexType).addElementType(simp.getSimple().getTypeName(), simp.getName());
		    						}
		    						}
		    					}
		    						((SequenceType)complexType).addElementType(type, elementName);
		    						localMap.put(complexTypeName, complexType);
		    					}
		    				  }else{	  
		    					seqComplex=new SequenceType();
		    			    	seqComplex.setName(complexTypeName);
		    			    	
		    			    	 //check for TNS first
		    			    	List<Type> elements=getAllTNS(localMap, type);
	    						  if(elements!=null){
	    							  
	    							for (Type simpleType : elements) {
	    							if(simpleType instanceof SimpleTypeImp){
	    								SimpleTypeImp simp=(SimpleTypeImp)simpleType;
	    								seqComplex.addElementType(simp.getSimple().getTypeName(), simp.getName());
	    							}
	    							}
	    						  }
		    			    	seqComplex.addElementType(type, elementName);
		    			    	localMap.put(complexTypeName, seqComplex);		    			    	 
		    				  }
			    			} 
	    			  }
	    		  }
	    	  }
	     }	     
	      handleStandaloneElement(element, localMap);
	      handleChoiceElement(element, localMap);
	      handleAllComplex(element, localMap);
	    }
	    
  		} catch (CannotAddTypeToCollectionException e) {		
  			e.printStackTrace();
  		}
	   
	  }
  private void handleAllComplex(Element element, Map<String, Type> localMap){
	  String type=null;
	  String elementName=null;
	  Element parentElement=element.getParent();
	  AllComplexType allComplex=null;

 	 try {
	  if(element.getName().equals("element")&& parentElement!=null 
			  && parentElement.getName().equals("all")
			  && parentElement.getParent().getName().equals("complexType") 
			  && parentElement.getParent().getParent().getName().equals("schema")){
		  
		  String allComplexTypeName=parentElement.getParent().getAttributeValue("name");
		  type = getTypeAttribute(element);
		  elementName=element.getAttributeValue("name"); //the element name is not stored in the simpletype 4now
		if(type!=null){
			
			if(localMap.containsKey(allComplexTypeName)){
				  Type complexType=localMap.get(allComplexTypeName);
				  if(complexType instanceof AllComplexType){
					 List<Type> elements=getAllTNS(localMap, type);
					if(elements!=null){
						for (Type simpleType : elements) {
							if(simpleType instanceof SimpleTypeImp){
								SimpleTypeImp simp=(SimpleTypeImp)simpleType;
								((AllComplexType)complexType).addElementType(simp.getSimple().getTypeName(), simp.getName());
							}
						}
					}						  
					((AllComplexType)complexType).addElementType(type, elementName);
					
					 localMap.put(allComplexTypeName, complexType);
				  }
			}else{
				allComplex=new AllComplexType();
				allComplex.setName(allComplexTypeName);
				List<Type> elements=getAllTNS(localMap, type);
				  
				if(elements!=null){
					for (Type simpleType : elements) {
						if(simpleType instanceof SimpleTypeImp){
							SimpleTypeImp simp=(SimpleTypeImp)simpleType;
							allComplex.addElementType(simp.getSimple().getTypeName(), simp.getName());
						}
					}
				}
		    	allComplex.addElementType(type, elementName);
				localMap.put(allComplexTypeName, allComplex);
		    }
		}
	 }
	 } catch (CannotAddTypeToCollectionException e) {		
			e.printStackTrace();
  	 }
  }
  private void handleStandaloneElement(Element element, Map<String, Type> localMap){
	  
	  String type=null;
	  Element parentElement=element.getParent();
	  SimpleTypeImp simpleType=null;
	  
	//handle standalone element without restrictions
      if(element.getName().equals("element")
    		  && parentElement!=null 
    		  && parentElement.getName().equals("schema")
    		  && element.getChildren().isEmpty()){
    	  
    	  String name=element.getAttributeValue("name");
    	  type=getTypeAttribute(element);
    	  //create a simple type
    	  simpleType=new SimpleTypeImp(type, name);
    	  //add it to the type set.
    	  localMap.put(name, simpleType);
    }
    if(parentElement!=null && parentElement.getName().equals("restriction")){
    	  
    	type=parentElement.getAttributeValue("base");
    	  
    	Element restrictionParent=parentElement.getParent();
    	if(restrictionParent!=null && restrictionParent.getName().equals("simpleType")){
    		  
    	String name=restrictionParent.getAttributeValue("name");
    	if(restrictionParent.getParent()!=null && restrictionParent.getParent().getName().equals("schema")){
    			  //create a simple type with restrictions  
    		simpleType=new SimpleTypeImp(type, name);
        	localMap.put(name, simpleType);
        }
    }
    }
  }
  private void handleChoiceElement(Element element, Map<String, Type> localMap){
	
	  String name=element.getAttributeValue("name");
	
	  SimpleType simple=null;
	  ChoiceType choiceComplex=null;
	  String type=null;
	  Element parentElement=element.getParent();
	  
	  try { 
	  
      if(element.getName().equals("element")&& parentElement!=null && parentElement.getName().equals("choice")){
    	  
    	  choiceComplex=new ChoiceType(); 
    	  type=getTypeAttribute(element);
    	 
    	  Element parent2=parentElement.getParent();
    	  if(parent2!=null && parent2.getName().equals("complexType")){
    		  Element parent3=parent2.getParent();
    		  
    		  if(parent3!=null && parent3.getName().equals("element")){
    			 String complexTypeName=parent3.getAttributeValue("name");
    			  if(type!=null){
	    			List<Type> elements=getAllTNS(localMap, type);
	   				  
	   				if(elements!=null){
	   					for (Type simpleType : elements) {
	   						if(simpleType instanceof SimpleTypeImp){
	   							SimpleTypeImp simp=(SimpleTypeImp)simpleType;
	   							choiceComplex.addElementType(simp.getSimple().getTypeName(), simp.getName());
	   						}
	   					}
	   				  }
					choiceComplex.addElementType(type, name);
	    			choiceComplex.setName(complexTypeName);
	    			//add the choice complex to the map
	    			localMap.put(complexTypeName, choiceComplex);
	    		}
    			  //System.out.println();
    		}else if(parent3!=null && parent3.getName().equals("schema")){
    			String complexTypeName=parent2.getAttributeValue("name");
    			  
    			getAllTNS(localMap, type);
    			 List<Type> elements=getAllTNS(localMap, type);
  				  
  				  if(elements!=null){
  					  for (Type simpleType : elements) {
  						  if(simpleType instanceof SimpleTypeImp){
  							  SimpleTypeImp simp=(SimpleTypeImp)simpleType;
  							  choiceComplex.addElementType(simp.getSimple().getTypeName(), simp.getName());
  						  }
  					}
  				  }
				choiceComplex.addElementType(type, name);
    			//add the choice complex to the set
    			localMap.put(complexTypeName, choiceComplex);		  
    		}
    	  }
      }
      } catch (CannotAddTypeToCollectionException e) {
			
		  e.printStackTrace();
	  }
  }
  
  private  String getTypeAttribute(Element element){
	  List attributes = element.getAttributes();
	  String value=null;
	    if (!attributes.isEmpty()) {
	      Iterator iterator = attributes.iterator();
	      while (iterator.hasNext()) {
	        Attribute attribute = (Attribute) iterator.next();
	        String name = attribute.getName();
	        value = attribute.getValue();
	        
	        Namespace attributeNamespace = attribute.getNamespace();
	        
	        if (attributeNamespace == Namespace.NO_NAMESPACE) {
	        
	        	if("type".equals(name)){
	        	  //get the type of the element
	        	 return value;
	        	}
	        }
	        else {
	          String prefix = attributeNamespace.getPrefix();
	          
	          if("type".equals(name)){
	        	  return value;      	   
	          }	          
	        }
	      }
	    }
	    
	    return value;
  }
  
 public static void enter(String plan, String WSDLFile, PrintWriter out){
	 	
		final Set<TypeMap> parsedWsdlSet=new HashSet<TypeMap>();
		List<String> wsdlURL=new ArrayList<String>();
		 wsdlURL.add(plan); 
		 wsdlURL.add(WSDLFile);
		
	      for (String url : wsdlURL) {
	    	  if(!url.equals(plan)){
	    		AlgorithmEngine parser=new AlgorithmEngine();
	    		Map<String, Type> newlocalMap=new HashMap<String, Type>();
	    		parser.setLocalMap(newlocalMap);
	    		
	    		TypeMap WSDLTypeMap=parser.processWSDL(url, newlocalMap);
			    parsedWsdlSet.add(WSDLTypeMap);
			    
			    }else{
			    	AlgorithmEngine parser2=new AlgorithmEngine();
			    	Map<String, Type> localMap2=new HashMap<String, Type>();
			    	parser2.setLocalMap(localMap2);
			    	TypeMap planTypeMap=parser2.processWSDL(url, localMap2);
			    	  parsedWsdlSet.add(planTypeMap);
			    }
	      }	
	      processParsedWSDLSet(parsedWsdlSet, plan, out);
	    
 }
  
 public static void processParsedWSDLSet(final Set<TypeMap> parsedWsdlSet, String plan, PrintWriter out){
	  TypeMap planWSDL=null;
 	
 	for (Iterator iterator = parsedWsdlSet.iterator(); iterator.hasNext();) {
 		TypeMap typeMap = (TypeMap) iterator.next();
 		
 		if(typeMap.getFileName().equals(plan)){
 			planWSDL=typeMap;
 			break;
 		}
		
 	}
 	
 	for (Iterator iterator = parsedWsdlSet.iterator(); iterator.hasNext();) {
 		//set that holds all the keys in the plan that match
 		Set<String> matchSet=new HashSet<String>();
 		
 		TypeMap typeMap = (TypeMap) iterator.next();
 		
 		if(plan!=null){
 			Map<String, Type> planTypeMap=planWSDL.getLocalMap();
 			Set<String> keySet=planTypeMap.keySet();
 			int matchCounter=0;
 			if(!typeMap.getFileName().equals(plan)){
 				//obtain all other parsed wsdls except the plan
 				Map<String, Type> otherTypes=typeMap.getLocalMap();
 				Set<String> otherTypesKEYS=otherTypes.keySet();
 				for (String key : keySet) {
 					
 					//get each type in the plan and compare it with each type in the parsed WSDL
						Type planType=planTypeMap.get(key);
						
						for (String otherWSDLKey : otherTypesKEYS) {
							
							Type wsdlType=otherTypes.get(otherWSDLKey);						
							if(MappingDictionary.complexTypeEquivalence(planType, wsdlType)){
								out.println("<tr>");
								out.println("<td> &nbsp;"+planType.getName()+"</td> <td>&nbsp;"+wsdlType.getName()+
										"</td><td>&nbsp;"+typeMap.getFileName()+"</td>");							
								out.println("</tr>");
								matchCounter++;
								matchSet.add(key);
							}else if(MappingDictionary.isSimpleComplexTypeEquivalent(planType, wsdlType)){
								out.println("<tr>");
								out.println("<td> &nbsp;"+planType.getName()+"</td> <td>&nbsp;"+wsdlType.getName()+
										"</td><td>&nbsp;"+typeMap.getFileName()+"</td>" );
								out.println("</tr>");
								matchCounter++;
								matchSet.add(key);
							}else if(MappingDictionary.simpleTypeEquivalence(planType, wsdlType)){
								out.println("<tr>");
								out.println("<td> &nbsp;"+planType.getName()+"</td> <td>&nbsp;"+wsdlType.getName()+
										"</td><td>&nbsp;"+typeMap.getFileName()+"</td>");
								out.println("</tr>");
								matchCounter++;
								matchSet.add(key);
							}
						}					
						
				}
 				
 				String percentageMatches=String.format("%.0f", ((double)matchSet.size()/keySet.size())*100);
 				out.println("<tr>");
				out.println("<td><b> No of Plan Actions:</b>"+keySet.size()+"</td>" +
						"<td><b> No of Actions:</b> "+otherTypesKEYS.size()+
						"</td><td><b>No of Matches:</b> "+matchCounter+"</td><td><b>"+percentageMatches+"</b>%</td>" );
				out.println("</tr>");
 				
 			}
 		}
 	}
 }
  
  protected  TypeMap processWSDL(String url, Map<String, Type> localMap){
	  TypeMap typemap=null;
	  SAXBuilder parser = new SAXBuilder();
	  Document document;
	  try {
		  document = parser.build(url);
		  process(document.getRootElement(), localMap);
		} catch (JDOMException e) {
			e.printStackTrace();
		} 
    	Map<String, Type> map= getTypeMap();
    	
    	typemap=new TypeMap(url, map);
    	parser=null;
    	document=null;
    	return typemap;
  }
  
  
}
